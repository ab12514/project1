{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# What this Project is About\n",
    "One of the main ways free apps make money is through in-app ads. In order to maximize revenue for these apps, the number of users should be maximized as well. With that being said, our goal for this project will be to act as data analysts for a company that focuses on building free English iOS and Android apps and analyze data in order to better understand what type of apps attract more users. We will be looking into some apps on Google Play and the App Store to help us accomplish this goal.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def explore_data(dataset, start, end, rows_and_columns=False):\n",
    "    dataset_slice = dataset[start:end]    \n",
    "    for row in dataset_slice:\n",
    "        print(row)\n",
    "        print('\\n') # adds a new (empty) line after each row\n",
    "\n",
    "    if rows_and_columns:\n",
    "        print('Number of rows:', len(dataset))\n",
    "        print('Number of columns:', len(dataset[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "opened_file = open('AppleStore.csv')\n",
    "from csv import reader\n",
    "read_file = reader(opened_file)\n",
    "apple_data = list(read_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "opened_file = open('googleplaystore.csv')\n",
    "from csv import reader\n",
    "read_file = reader(opened_file)\n",
    "google_data = list(read_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['284882215', 'Facebook', '389879808', 'USD', '0.0', '2974676', '212', '3.5', '3.5', '95.0', '4+', 'Social Networking', '37', '1', '29', '1']\n",
      "\n",
      "\n",
      "['389801252', 'Instagram', '113954816', 'USD', '0.0', '2161558', '1289', '4.5', '4.0', '10.23', '12+', 'Photo & Video', '37', '0', '29', '1']\n",
      "\n",
      "\n",
      "['529479190', 'Clash of Clans', '116476928', 'USD', '0.0', '2130805', '579', '4.5', '4.5', '9.24.12', '9+', 'Games', '38', '5', '18', '1']\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "['Photo Editor & Candy Camera & Grid & ScrapBook', 'ART_AND_DESIGN', '4.1', '159', '19M', '10,000+', 'Free', '0', 'Everyone', 'Art & Design', 'January 7, 2018', '1.0.0', '4.0.3 and up']\n",
      "\n",
      "\n",
      "['Coloring book moana', 'ART_AND_DESIGN', '3.9', '967', '14M', '500,000+', 'Free', '0', 'Everyone', 'Art & Design;Pretend Play', 'January 15, 2018', '2.0.0', '4.0.3 and up']\n",
      "\n",
      "\n",
      "['U Launcher Lite â€“ FREE Live Cool Themes, Hide Apps', 'ART_AND_DESIGN', '4.7', '87510', '8.7M', '5,000,000+', 'Free', '0', 'Everyone', 'Art & Design', 'August 1, 2018', '1.2.4', '4.0.3 and up']\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "[['id', 'track_name', 'size_bytes', 'currency', 'price', 'rating_count_tot', 'rating_count_ver', 'user_rating', 'user_rating_ver', 'ver', 'cont_rating', 'prime_genre', 'sup_devices.num', 'ipadSc_urls.num', 'lang.num', 'vpp_lic']]\n",
      "\n",
      "\n",
      "[['App', 'Category', 'Rating', 'Reviews', 'Size', 'Installs', 'Type', 'Price', 'Content Rating', 'Genres', 'Last Updated', 'Current Ver', 'Android Ver']]\n"
     ]
    }
   ],
   "source": [
    "# prints out the first few rows of our data from the App Store \n",
    "# and Google Play Store respectively\n",
    "explore_data(apple_data, 1, 4)\n",
    "print('\\n')\n",
    "explore_data(google_data, 1, 4)\n",
    "print('\\n')\n",
    "print('\\n')\n",
    "\n",
    "# prints out the header rows for both spreadsheets\n",
    "print(apple_data[:1])\n",
    "print('\\n')\n",
    "print(google_data[:1])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deleting Wrong Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the __[discussion section](https://www.kaggle.com/datasets/lava18/google-play-store-apps/discussion/164101?resource=download)__ from the source of our dataset, there was mention of a row that included some incorrect data, so we will delete that row.\n",
    "\n",
    "At the time the dataset was used by us, the labeling of the rows changed a bit, so the row that we delete will be the same even though the labeling is different.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run this line of code only 1 time!\n",
    "del google_data[10473]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing Duplicate Rows"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Google Play dataset has duplicate entries. In order to confirm this, we will print a few rows that have duplicates.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coloring book moana\n",
      "Mcqueen Coloring pages\n",
      "UNICORN - Color By Number & Pixel Art Coloring\n",
      "Textgram - write on photos\n"
     ]
    }
   ],
   "source": [
    "for app in google_data[:100]:\n",
    "    name = app[0] \n",
    "    for app_2 in google_data:\n",
    "        name_2 = app_2[0]\n",
    "        if name == name_2 and app != app_2:\n",
    "            print(name)             "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we will choose one of the apps and print their duplicate rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Coloring book moana', 'ART_AND_DESIGN', '3.9', '967', '14M', '500,000+', 'Free', '0', 'Everyone', 'Art & Design;Pretend Play', 'January 15, 2018', '2.0.0', '4.0.3 and up']\n",
      "['Coloring book moana', 'FAMILY', '3.9', '974', '14M', '500,000+', 'Free', '0', 'Everyone', 'Art & Design;Pretend Play', 'January 15, 2018', '2.0.0', '4.0.3 and up']\n"
     ]
    }
   ],
   "source": [
    "for app in google_data:\n",
    "    name = app[0]\n",
    "    if name == 'Coloring book moana':\n",
    "        print(app)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How many duplicate rows are there? Let's find out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicate apps: 1181\n"
     ]
    }
   ],
   "source": [
    "duplicate_apps = []\n",
    "unique_apps = []\n",
    "\n",
    "for app in google_data:\n",
    "    name = app[0]\n",
    "    if name in unique_apps:\n",
    "        duplicate_apps.append(name)\n",
    "    else:\n",
    "        unique_apps.append(name)\n",
    "        \n",
    "print('Number of duplicate apps:', len(duplicate_apps)) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One of the ways we can distinguish duplicate rows is through the number of reviews (the 4th column). It is reasonable to assume that the higher number of reviews corresponds to the most up-to-date data for our app. Let's use this criterion to remove the duplicates. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9659\n"
     ]
    }
   ],
   "source": [
    "reviews_max = {}\n",
    "for app in google_data[1:]:\n",
    "    name = app[0]\n",
    "    n_reviews = float(app[3])\n",
    "    if name in reviews_max and reviews_max[name] < n_reviews:\n",
    "        reviews_max[name] = n_reviews\n",
    "    elif name not in reviews_max:\n",
    "        reviews_max[name] = n_reviews\n",
    "        \n",
    "# print(reviews_max)   \n",
    "# len(reviews_max)\n",
    "\n",
    "android_clean = []\n",
    "already_added = []\n",
    "for app in google_data[1:]:\n",
    "    name = app[0]\n",
    "    n_reviews = float(app[3])\n",
    "    if n_reviews == reviews_max[name] and name not in already_added:\n",
    "        android_clean.append(app)\n",
    "        already_added.append(name)\n",
    "    \n",
    "# print(android_clean)\n",
    "print(len(android_clean))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "- In our first block of code, we created an empty dictionary which stores the names of the apps and the maximum number of reviews for each app. The keys are the names and the values are the number of reviews. \n",
    "    - We started by looping through each row (excluding the header) of our dataset and comparing each duplicate's number of reviews. If the name is not unique and its # of reviews exceeds its value in the dictionary, then its # of reviews replaces that value. \n",
    "    - If the name is not unique, then we insert the name in our dictionary and assign its # of reviews as its value.\n",
    "\n",
    "----------------------------------------------------------------------------\n",
    "\n",
    "- In our second block of code, we created two empty lists. The 'android_clean' list is a list of lists and will be the cleaned version of our original dataset. The 'already_added' list is used to keep track of the names of the apps that are contained in 'android_clean'. \n",
    "    - We loop through each row of our original dataset and insert that row to the end of 'android_clean' if it has the maximum number of reviews and its name is unique. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing Non-English Apps\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9614\n",
      "9659\n",
      "\n",
      "\n",
      "6184\n",
      "7198\n"
     ]
    }
   ],
   "source": [
    "def english(name):\n",
    "    non_english = 0\n",
    "    for character in name:\n",
    "        if ord(character)>127:\n",
    "            non_english += 1\n",
    "        if non_english > 3:\n",
    "            return False\n",
    "            break\n",
    "    return True\n",
    "\n",
    "android_english = []\n",
    "ios_english = []\n",
    "\n",
    "for app in android_clean:\n",
    "    name = app[0]\n",
    "    if english(name):\n",
    "        android_english.append(app)\n",
    "        \n",
    "print(len(android_english))\n",
    "print(len(android_clean))\n",
    "print('\\n')\n",
    "\n",
    "for app in apple_data:\n",
    "    name = app[1]\n",
    "    if english(name):\n",
    "        ios_english.append(app)\n",
    "        \n",
    "print(len(ios_english))\n",
    "print(len(apple_data))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- First, we created a function to determine if a string was english or not. \n",
    "    - We determined that english characters/letters correspond to numbers that fall within a certain ASCII range, so we loop through a given app's name to see if it contains a character that falls outside that range. \n",
    "    - If there is such a character, then we can be fairly certain that the app is not English and the function stops, otherwise it continues until the loop ends. \n",
    "    - To account for symbols and special characters like emojis, we determined that a suitable app must contain no more than three such characters.\n",
    "\n",
    "- Next, we applied this function to each row of our datasets and created new lists that contain English apps. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Isolating the Free Apps\n",
    "\n",
    "So far we removed innacurate app entries, duplicate apps, and non-English apps. Since we want to analyze free apps, we must now finalize our cleaning process by isolating the free apps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8864\n",
      "9614\n",
      "\n",
      "\n",
      "3222\n",
      "6184\n"
     ]
    }
   ],
   "source": [
    "android_final = []\n",
    "ios_final = []\n",
    "\n",
    "for app in android_english:\n",
    "    price = app[7]\n",
    "    if price == '0':\n",
    "        android_final.append(app)\n",
    "        \n",
    "print(len(android_final))\n",
    "print(len(android_english))\n",
    "print('\\n')\n",
    "\n",
    "for app in ios_english:\n",
    "    price = app[4]\n",
    "    if price == '0' or price == '0.0':\n",
    "        ios_final.append(app)\n",
    "        \n",
    "print(len(ios_final))\n",
    "print(len(ios_english))        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Most Common Apps by Genre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "App Store dataset:\n",
      "Games : 58.16263190564867\n",
      "Entertainment : 7.883302296710118\n",
      "Photo & Video : 4.9658597144630665\n",
      "Education : 3.6623215394165114\n",
      "Social Networking : 3.2898820608317814\n",
      "Shopping : 2.60707635009311\n",
      "Utilities : 2.5139664804469275\n",
      "Sports : 2.1415270018621975\n",
      "Music : 2.0484171322160147\n",
      "Health & Fitness : 2.017380509000621\n",
      "Productivity : 1.7380509000620732\n",
      "Lifestyle : 1.5828677839851024\n",
      "News : 1.3345747982619491\n",
      "Travel : 1.2414649286157666\n",
      "Finance : 1.1173184357541899\n",
      "Weather : 0.8690254500310366\n",
      "Food & Drink : 0.8069522036002483\n",
      "Reference : 0.5586592178770949\n",
      "Business : 0.5276225946617008\n",
      "Book : 0.4345127250155183\n",
      "Navigation : 0.186219739292365\n",
      "Medical : 0.186219739292365\n",
      "Catalogs : 0.12414649286157665\n",
      "\n",
      "\n",
      "Google Play dataset:\n",
      "FAMILY : 18.907942238267147\n",
      "GAME : 9.724729241877256\n",
      "TOOLS : 8.461191335740072\n",
      "BUSINESS : 4.591606498194946\n",
      "LIFESTYLE : 3.9034296028880866\n",
      "PRODUCTIVITY : 3.892148014440433\n",
      "FINANCE : 3.700361010830325\n",
      "MEDICAL : 3.5311371841155235\n",
      "SPORTS : 3.395758122743682\n",
      "PERSONALIZATION : 3.3167870036101084\n",
      "COMMUNICATION : 3.237815884476534\n",
      "HEALTH_AND_FITNESS : 3.079873646209386\n",
      "PHOTOGRAPHY : 2.9444945848375452\n",
      "NEWS_AND_MAGAZINES : 2.7978339350180503\n",
      "SOCIAL : 2.6624548736462095\n",
      "TRAVEL_AND_LOCAL : 2.33528880866426\n",
      "SHOPPING : 2.2450361010830324\n",
      "BOOKS_AND_REFERENCE : 2.1435018050541514\n",
      "DATING : 1.861462093862816\n",
      "VIDEO_PLAYERS : 1.7937725631768953\n",
      "MAPS_AND_NAVIGATION : 1.3989169675090252\n",
      "FOOD_AND_DRINK : 1.2409747292418774\n",
      "EDUCATION : 1.1620036101083033\n",
      "ENTERTAINMENT : 0.9589350180505415\n",
      "LIBRARIES_AND_DEMO : 0.9363718411552346\n",
      "AUTO_AND_VEHICLES : 0.9250902527075813\n",
      "HOUSE_AND_HOME : 0.8235559566787004\n",
      "WEATHER : 0.8009927797833934\n",
      "EVENTS : 0.7107400722021661\n",
      "PARENTING : 0.6543321299638989\n",
      "ART_AND_DESIGN : 0.6430505415162455\n",
      "COMICS : 0.6204873646209387\n",
      "BEAUTY : 0.5979241877256317\n"
     ]
    }
   ],
   "source": [
    "def freq_table(dataset, index):\n",
    "    table = {}\n",
    "    for row in dataset:\n",
    "        genre = row[index]\n",
    "        if genre in table:\n",
    "            table[genre] += 1\n",
    "        else:\n",
    "            table[genre] = 1\n",
    "            \n",
    "    # display frequencies as percentages\n",
    "    sum_genre = 0\n",
    "    for key in table:\n",
    "       sum_genre += table[key]\n",
    "    \n",
    "    for key in table:\n",
    "        table[key] = table[key]*100/(sum_genre)\n",
    "        #table[key] = round(table[key], 2)\n",
    "       \n",
    "    return table\n",
    "            \n",
    "#print(freq_table(ios_final,11))\n",
    "\n",
    "def display_table(dataset, index):\n",
    "    table = freq_table(dataset, index)\n",
    "    table_display = []\n",
    "    for key in table:\n",
    "        key_val_as_tuple = (table[key], key)\n",
    "        table_display.append(key_val_as_tuple)\n",
    "\n",
    "    table_sorted = sorted(table_display, reverse = True)\n",
    "    for entry in table_sorted:\n",
    "        print(entry[1], ':', entry[0])\n",
    "\n",
    "print('App Store dataset:')\n",
    "display_table(ios_final, 11)\n",
    "print('\\n')\n",
    "print('Google Play dataset:')\n",
    "display_table(android_final, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyzing the App Store, we see that \"Games\" is by far the most common genre, making up 58% of the available free English iOS apps.\n",
    "   - \"Entertainment\", although similar to \"Games\", makes up about 8% and is the second most common genre. \n",
    "   - The rest of the genres range from 0% to 5%. Interestingly, \"Navigation\" and \"Medical\" share the same percentage, taking up about 0.186%.\n",
    "   \n",
    "The general impression we gain from this is that most of the free English apps available on the App Store are designed for gaming/entertainment purposes. Since gaming/entertainment apps occupy such a large space, it is likely that apps of that genre have a large number of users. Thus, if we were to recommend an app profile for the App Store market, this dataset would be helpful in that process.\n",
    "\n",
    "Looking at the Google Play dataset, we can spot a number of differences. \n",
    "   - The most common genre is \"FAMILY\" at about 19%, with \"GAME\" coming second at about 9.7%. \n",
    "   - Business apps sit at about 4.6% on Google Play compared to 0.5% on the App Store. \n",
    "   - Another interesting difference is with entertainment apps. They make up a measly 0.96% of the Google Play market compared to about 8% of the App Store market. \n",
    "   \n",
    "It is worth noting that there are a larger number of genres compared to the App Store which leads to more scattering in our data. Although there is still a large gaming presence among android apps, there is much more balance when it comes to the types of free English apps that are available on Google Play compared to the App Store. Therefore, it would not be a good idea to recommend an app profile based on this dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have an understanding of the types of apps each market consists of, it's time we take a deeper look by identifying the most popular apps by genre. This would be clear if the number of installs was included in both datasets, but that is not the case for the App Store dataset. We will instead look at the next closest thing, which is the total number of reviews for the App Store. \n",
    "\n",
    "\n",
    "## Most Popular Apps by Genre on the App Store"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Social Networking : 71548.34905660378\n",
      "Photo & Video : 28441.54375\n",
      "Games : 22788.6696905016\n",
      "Music : 57326.530303030304\n",
      "Reference : 74942.11111111111\n",
      "Health & Fitness : 23298.015384615384\n",
      "Weather : 52279.892857142855\n",
      "Utilities : 18684.456790123455\n",
      "Travel : 28243.8\n",
      "Shopping : 26919.690476190477\n",
      "News : 21248.023255813954\n",
      "Navigation : 86090.33333333333\n",
      "Lifestyle : 16485.764705882353\n",
      "Entertainment : 14029.830708661417\n",
      "Food & Drink : 33333.92307692308\n",
      "Sports : 23008.898550724636\n",
      "Book : 39758.5\n",
      "Finance : 31467.944444444445\n",
      "Education : 7003.983050847458\n",
      "Productivity : 21028.410714285714\n",
      "Business : 7491.117647058823\n",
      "Catalogs : 4004.0\n",
      "Medical : 612.0\n"
     ]
    }
   ],
   "source": [
    "ios_genre = freq_table(ios_final, 11)\n",
    "#print(ios_genre)\n",
    "\n",
    "for genre in ios_genre:\n",
    "    total = 0\n",
    "    len_genre = 0\n",
    "    for app in ios_final:\n",
    "        genre_app = app[11]\n",
    "        if genre_app == genre:\n",
    "            ratings = float(app[5])\n",
    "            total += ratings\n",
    "            len_genre += 1\n",
    "            \n",
    "    avg_ratings = total/len_genre\n",
    "    print(genre, ':', avg_ratings)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking back at our previous table, we got the impression that gaming apps dominated the App Store. Yet, the average number of reviews is far less than that of reference and social networking apps which only occupied about 0.5% and 3%, respectively, of the App Store. \n",
    "\n",
    "This difference makes sense since the number of gaming apps is so high. Also, this probably suggests that there are a handful of social networking and reference apps that dominate their respective genres, so it would be much harder to compete in those areas. A good recommendation based on this data would be to make a utility app. This is because they occupy 2.6% of the App Store, but the average number of reviews is only 18,684, so there is potential for a new app to break through.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's see what happens when we look into the Google Play market.\n",
    "\n",
    "## Most Popular Apps by Genre on Google Play"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ART_AND_DESIGN : 1986335.0877192982\n",
      "AUTO_AND_VEHICLES : 647317.8170731707\n",
      "BEAUTY : 513151.88679245283\n",
      "BOOKS_AND_REFERENCE : 8767811.894736841\n",
      "BUSINESS : 1712290.1474201474\n",
      "COMICS : 817657.2727272727\n",
      "COMMUNICATION : 38456119.167247385\n",
      "DATING : 854028.8303030303\n",
      "EDUCATION : 1833495.145631068\n",
      "ENTERTAINMENT : 11640705.88235294\n",
      "EVENTS : 253542.22222222222\n",
      "FINANCE : 1387692.475609756\n",
      "FOOD_AND_DRINK : 1924897.7363636363\n",
      "HEALTH_AND_FITNESS : 4188821.9853479853\n",
      "HOUSE_AND_HOME : 1331540.5616438356\n",
      "LIBRARIES_AND_DEMO : 638503.734939759\n",
      "LIFESTYLE : 1437816.2687861272\n",
      "GAME : 15588015.603248259\n",
      "FAMILY : 3695641.8198090694\n",
      "MEDICAL : 120550.61980830671\n",
      "SOCIAL : 23253652.127118643\n",
      "SHOPPING : 7036877.311557789\n",
      "PHOTOGRAPHY : 17840110.40229885\n",
      "SPORTS : 3638640.1428571427\n",
      "TRAVEL_AND_LOCAL : 13984077.710144928\n",
      "TOOLS : 10801391.298666667\n",
      "PERSONALIZATION : 5201482.6122448975\n",
      "PRODUCTIVITY : 16787331.344927534\n",
      "PARENTING : 542603.6206896552\n",
      "WEATHER : 5074486.197183099\n",
      "VIDEO_PLAYERS : 24727872.452830188\n",
      "NEWS_AND_MAGAZINES : 9549178.467741935\n",
      "MAPS_AND_NAVIGATION : 4056941.7741935486\n"
     ]
    }
   ],
   "source": [
    "android_genre = freq_table(android_final,1)\n",
    "\n",
    "for category in android_genre:\n",
    "    total = 0\n",
    "    len_category = 0\n",
    "    for app in android_final:\n",
    "        category_app = app[1]\n",
    "        if category_app == category:\n",
    "            n_installs = app[5]\n",
    "            n_installs = n_installs.replace('+', '')\n",
    "            n_installs = n_installs.replace(',', '')\n",
    "            n_installs = float(n_installs)\n",
    "            total += n_installs\n",
    "            len_category += 1\n",
    "    \n",
    "    avg_installs = total/len_category\n",
    "    print(category,':', avg_installs)\n",
    "    \n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the Google Play dataset includes a column that (roughly) provides the number of installs for an app, we should be able to gain a better understanding of what kind of app is best for that market. \n",
    "   - One interesting aspect we see is that although entertainment apps barely make up 1% of Google Play, they have an average of 11,000,000+ installs, so similar to the case with social networking and reference apps on the App Store, it would probably be best to not make those kinds of apps.\n",
    "   - Instead, a good candidate would be finance. With its average amount of installs hovering around 1,000,000 while making up about 3.7% of the market, it looks like there is a healthy balance of apps with a large amount of users. Although a bit more unclear, a similar case can be made for finance apps on the App Store.\n",
    "\n",
    "A quick look into these apps will show us that most of them are either banking of investing apps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "K PLUS : 10,000,000+\n",
      "ING Banking : 1,000,000+\n",
      "Citibanamex Movil : 5,000,000+\n",
      "The postal bank : 5,000,000+\n",
      "KTB Netbank : 5,000,000+\n",
      "Mobile Bancomer : 10,000,000+\n",
      "Nedbank Money : 500,000+\n",
      "SCB EASY : 5,000,000+\n",
      "CASHIER : 10,000,000+\n",
      "Rabo Banking : 1,000,000+\n",
      "Capitec Remote Banking : 1,000,000+\n",
      "Itau bank : 10,000,000+\n",
      "Nubank : 5,000,000+\n",
      "The Societe Generale App : 1,000,000+\n",
      "IKO : 1,000,000+\n",
      "Cash App : 10,000,000+\n",
      "Standard Bank / Stanbic Bank : 1,000,000+\n",
      "Bualuang mBanking : 5,000,000+\n",
      "Intesa Sanpaolo Mobile : 1,000,000+\n",
      "UBA Mobile Banking : 1,000,000+\n",
      "BBVA Spain : 5,000,000+\n",
      "MyMo by GSB : 1,000,000+\n",
      "VTB-Online : 5,000,000+\n",
      "Ecobank Mobile Banking : 1,000,000+\n",
      "Banorte Movil : 1,000,000+\n",
      "Zenith Bank Mobile App : 1,000,000+\n",
      "GCash - Buy Load, Pay Bills, Send Money : 1,000,000+\n",
      "Post Bank : 1,000,000+\n",
      "Ä°ÅŸCep : 10,000,000+\n",
      "People's Bank : 1,000,000+\n",
      "Transfer : 5,000,000+\n",
      "T-Mobile in : 1,000,000+\n",
      "TrueMoney Wallet : 5,000,000+\n",
      "Alfa-Bank (Alfa-Bank) : 1,000,000+\n",
      "Bank of Brazil : 10,000,000+\n",
      "WiseBanyan - Invest For Free : 10,000+\n",
      "Robinhood - Investing, No Fees : 1,000,000+\n",
      "Wells Fargo Daily Change : 100,000+\n",
      "Even - organize your money, get paid early : 100,000+\n",
      "Digit Save Money Automatically : 100,000+\n",
      "Stash: Invest. Learn. Save. : 1,000,000+\n",
      "Expense IQ Money Manager : 1,000,000+\n",
      "Money Manager Expense & Budget : 5,000,000+\n",
      "Prism Pay Bills, Track Money, Personal Finance : 500,000+\n",
      "Monefy - Money Manager : 1,000,000+\n",
      "Simple - Better Banking : 100,000+\n",
      "Chime - Mobile Banking : 500,000+\n",
      "Bluebird by American Express : 1,000,000+\n",
      "Walmart MoneyCard : 1,000,000+\n",
      "Moven - Smart Finances : 100,000+\n",
      "Qapital - Save Small. Live Large : 100,000+\n",
      "Experian - Free Credit Report : 1,000,000+\n",
      "Branch : 1,000,000+\n",
      "WalletHub - Free Credit Score, Report & Monitoring : 50,000+\n",
      "CreditWise from Capital One : 1,000,000+\n",
      "NerdWallet: Personal Finance, Credit Score & Cash : 100,000+\n",
      "my face : 100,000+\n",
      "Credit Sesame : 1,000,000+\n",
      "Fresh EBT - Food Stamp Balance : 1,000,000+\n",
      "Hurdlr: Track Mileage, Expenses, and Log Receipts : 100,000+\n",
      "Mobills: Budget Planner : 1,000,000+\n",
      "Everlance: Free Mileage Log : 100,000+\n",
      "MileIQ - Free Mileage Tracker for Business : 1,000,000+\n",
      "QuickBooks Self-Employed:Mileage Tracker and Taxes : 1,000,000+\n",
      "FREE Stock Market Trading Tips : 50,000+\n",
      "MetaTrader 5 : 1,000,000+\n",
      "MetaTrader 4 : 5,000,000+\n",
      "Stock Quote : 500,000+\n",
      "Seeking Alpha : 1,000,000+\n",
      "Stock Trainer: Virtual Trading (Stock Markets) : 1,000,000+\n",
      "Stocks: Realtime Quotes Charts : 1,000,000+\n",
      "Stocks, Forex, Bitcoin, Ethereum: Portfolio & News : 5,000,000+\n",
      "US Stock Market : 100,000+\n",
      "Bloomberg Professional : 500,000+\n",
      "E*TRADE Mobile : 1,000,000+\n",
      "MSN Money- Stock Quotes & News : 1,000,000+\n",
      "Fox Business : 500,000+\n",
      "NSE Mobile Trading : 1,000,000+\n",
      "Yahoo Finance : 5,000,000+\n",
      "JStock - Stock Market, Portfolio & News : 500,000+\n",
      "Acorns - Invest Spare Change : 1,000,000+\n",
      "Webull - Stock Quotes & Free Stock Trading : 1,000,000+\n",
      "Trading 212 - Forex, Stocks, CFDs : 5,000,000+\n",
      "Current debit card and app made for teens : 50,000+\n",
      "Money Lover: Expense Tracker, Budget Planner : 1,000,000+\n",
      "Betterment : 100,000+\n",
      "Citizens Bank Mobile Banking : 1,000,000+\n",
      "GoBank : 500,000+\n",
      "NetSpend Prepaid : 1,000,000+\n",
      "BBVA Compass Banking : 500,000+\n",
      "PayPal : 50,000,000+\n",
      "BankMobile Vibe App : 1,000,000+\n",
      "Netspend Skylight ONE : 100,000+\n",
      "ACE Elite : 100,000+\n",
      "U.S. Bank : 1,000,000+\n",
      "Huntington Mobile : 1,000,000+\n",
      "USAA Mobile : 5,000,000+\n",
      "Associated Credit Union Mobile : 50,000+\n",
      "Bank of America Mobile Banking : 10,000,000+\n",
      "USE Credit Union Mobile : 10,000+\n",
      "Discover Mobile : 5,000,000+\n",
      "Wells Fargo Mobile : 10,000,000+\n",
      "Capital OneÂ® Mobile : 10,000,000+\n",
      "Amex Mobile : 1,000,000+\n",
      "Citi MobileÂ® : 5,000,000+\n",
      "Navy Federal Credit Union : 1,000,000+\n",
      "Chase Mobile : 10,000,000+\n",
      "HDFC Bank MobileBanking : 10,000,000+\n",
      "Barclays US for Android : 1,000,000+\n",
      "A+ Mobile : 10,000+\n",
      "Fortune City - A Finance App : 500,000+\n",
      "B : 50,000+\n",
      "E-NUM : 500,000+\n",
      "Synd e-Passbook : 1,000,000+\n",
      "F & M Mobile Banking : 5,000+\n",
      "m-Faisaa : 10,000+\n",
      "Q Mobile Banking : 10,000+\n",
      "R Bank : 5,000+\n",
      "T. Rowe Price PersonalÂ® App : 50,000+\n",
      "U by BB&T : 1,000,000+\n",
      "U of I Community Credit Union : 5,000+\n",
      "AB Anywhere Mobile Banking : 500+\n",
      "Hesab.af - Send money in Afghanistan : 1,000+\n",
      "EZ Ag Mobile : 5,000+\n",
      "Alabama Ag Credit Ag Banking : 100+\n",
      "Tri-Ag (WV) FCU : 100+\n",
      "AJ Bell Youinvest : 10,000+\n",
      "Google Pay : 100,000,000+\n",
      "loans.com.au Smart Money : 1,000+\n",
      "mon guide au bank populaire -infos et instructions : 1,000+\n",
      "App Seguridad AV Villas : 50,000+\n",
      "AX Battery Saver : 100,000+\n",
      "NB|AZ Mobile Banking : 10,000+\n",
      "NB|AZ Business Mobile Banking : 1,000+\n",
      "First Credit Union (AZ) Mobile : 10,000+\n",
      "BD Bank Interest : 5,000+\n",
      "Earn Money BD : 5,000+\n",
      "be Produbanco : 100,000+\n",
      "ePay.bg : 100,000+\n",
      "BH Online : 10+\n",
      "BH INVEST : 500+\n",
      "ZiraatBank BH : 10,000+\n",
      "Bi en LÃ­nea : 100,000+\n",
      "BI Mobile Banking : 10,000+\n",
      "BI APP : 100+\n",
      "BI Mobile : 10,000+\n",
      "Mint: Budget, Bills, Finance : 5,000,000+\n",
      "Capital Bk Mobile Business Dep : 100+\n",
      "BK Gold App : 50+\n",
      "BL Banking DES : 100+\n",
      "BL Mobile Banking : 1,000+\n",
      "B L Enterprises : 10+\n",
      "BM Wallet : 50,000+\n",
      "bm Wallet : 10,000+\n",
      "Mobilight-BM : 500+\n",
      "BM Assets : 500+\n",
      "BN MÃ¡s Cerca de Usted : 500,000+\n",
      "BNCR Token Celular : 100,000+\n",
      "BN Bank Mobilbank : 10,000+\n",
      "FX LITE BO : 10,000+\n",
      "B R Telco FCU Mobile Banking : 10,000+\n",
      "Banco Sabadell App. Your mobile bank : 1,000,000+\n",
      "BT Panorama : 5,000+\n",
      "Meu CartÃ£o BV : 500,000+\n",
      "Standard Chartered Mobile (BW) : 10,000+\n",
      "BW Mobilbanking fÃ¼r Smartphone und Tablet : 100,000+\n",
      "Bitcoin BX Thailand : 10,000+\n",
      "Bx Thailand Alert (Bitcoin) : 100+\n",
      "Bitcoin Bx (Thailand) : 10,000+\n",
      "BX Thailand - Crypto Tracking & Analyse Bitcoin : 100+\n",
      "BxPort - Bitcoin Bx (Thailand) : 50+\n",
      "bX Thailand Simple Market Price and Alert : 1,000+\n",
      "BX Diff - Crypto Coins Checker : 5,000+\n",
      "bitcoin exchange bx thailand : 5,000+\n",
      "Bitcoin & Cryptocurrency - Bx : 1,000+\n",
      "Casa de Bolsa Bx+ MÃ³vil : 500+\n",
      "Crypto Tracker by BitScreener : 10,000+\n",
      "CoinMarketApp - CryptoCurrency Portfolio, News,ICO : 500,000+\n",
      "Bitcoin Ticker Widget : 500,000+\n",
      "BZWBK24 mobile : 1,000,000+\n",
      "Inwestor mobile : 10,000+\n",
      "iBiznes24 mobile : 5,000+\n",
      "CB-Mobile Banking : 10,000+\n",
      "CB Bank Mobile Banking : 100,000+\n",
      "Citizens Bank - CB Mobile : 1,000+\n",
      "CB Mobile Access : 1,000+\n",
      "CB Trader : 1,000+\n",
      "CB Pay : 10,000+\n",
      "CB Mobile GA : 100+\n",
      "CB Mobile Biz : 500+\n",
      "C-E Federal Credit Union : 500+\n",
      "CF Invest : 500+\n",
      "CF PD : 100+\n",
      "CF : 100+\n",
      "1st Fed CI Mobile Banking : 500+\n",
      "CI Capital - Dynamic : 50+\n",
      "Credit Karma : 10,000,000+\n",
      "CL e-bank : 10,000+\n",
      "AND CO : 10,000+\n",
      "REI Co-op Mastercard : 10,000+\n",
      "Co-op Credit Union on the Go : 1,000+\n",
      "Sprig by CO-OP : 10,000+\n",
      "Central Bank and Trust Co. : 5,000+\n",
      "Soo Co-op Mobile Banking : 1,000+\n",
      "Co-Optima Mobile : 10,000+\n",
      "Grenada Co-operative Bank : 10,000+\n",
      "CP Federal Mobile : 10,000+\n",
      "CQ Mobile : 1,000+\n",
      "CQ SIGNAL PRO 5 : 10+\n",
      "CT Checkout : 50+\n",
      "CU: UPI Payments, Chat & Call : 100,000+\n",
      "CU of Colorado Mobile Banking : 10,000+\n",
      "Tech CU Mobile Banking : 10,000+\n",
      "Service CU Mobile Banking : 100,000+\n",
      "Redwood CU v3.1.0 : 50,000+\n",
      "Cyprus CU Mobile Banking : 10,000+\n",
      "BayPort CU Mobile Banking : 10,000+\n",
      "CU SoCal Mobile Banking : 10,000+\n",
      "Tropical Financial CU : 10,000+\n",
      "Travis CU : 10,000+\n",
      "Commonwealth CU Go Mobile : 10,000+\n",
      "Public Service CU Mobile : 10,000+\n",
      "Freedom CU : 10,000+\n",
      "Meritrust CU Mobile Banking : 50,000+\n",
      "Nusenda CUâ€“ Mobile Banking : 50,000+\n",
      "Lake Michigan CU Mobile : 50,000+\n",
      "Maps CU : 10,000+\n",
      "Family Savings CU Mobile : 10,000+\n",
      "FORUM Credit Union CU Online : 10,000+\n",
      "Educators CU Mobile Banking : 50,000+\n",
      "Space Coast CU Mobile : 100,000+\n",
      "First Tech Federal CU : 50,000+\n",
      "Southland CU : 10,000+\n",
      "Tech CU Card Manager : 1,000+\n",
      "Numerica CU : 50,000+\n",
      "Red River CU : 10,000+\n",
      "Firefighters First CU : 5,000+\n",
      "MYCU TX Mobile Banking : 100+\n",
      "Cy-Fair FCU Mobile Banking : 5,000+\n",
      "CY.SEND Online Top Up : 10,000+\n",
      "Alpha Bank CY : 1,000+\n",
      "EUROBANK CY : 100+\n",
      "Rewards : 5,000+\n",
      "Bank Of Cyprus : 100,000+\n",
      "Diario Financiero : 10,000+\n",
      "Free coupons and vouchers : 100+\n",
      "NY mobilbank DK - Danske Bank : 100,000+\n",
      "D.L. Evans Bank Mobile Banking : 10,000+\n",
      "DM Accounting and Payroll : 100+\n",
      "DN Calculators : 100+\n",
      "DN Prasad : 100+\n",
      "dt Pro : 1,000+\n",
      "Direct ExpressÂ® : 500,000+\n",
      "CCP DZ : Fill out a check | Number in letters DZD : 10,000+\n",
      "Currency Exchange DZ : 1,000+\n",
      "Devise Dz : 1,000+\n",
      "ChangeDA - Cours du DZD sur le marchÃ© parallÃ¨le : 10,000+\n",
      "Tunisian Dinar: Exchange rate : 10,000+\n",
      "Exchange Bank - EB Mobile : 1,000+\n",
      "EB-Banking (ersetzt) : 1,000+\n",
      "Tamilnadu EB Online Payment : 100,000+\n",
      "Online Kerala EB Bill Pay : 5,000+\n",
      "TNEB Quick Pay Easy : 10,000+\n",
      "TNEB Bill Checker / TNEB Bill Status : 1,000+\n",
      "EC Tax : 500+\n",
      "EF-myHR : 1,000+\n",
      "Education First FCU Mobile : 10,000+\n",
      "Financial Calculator Pro EF : 50,000+\n",
      "EF Financial Control Free : 10,000+\n",
      "Bee Mobile EG : 100,000+\n",
      "EG Tax Service : 100+\n",
      "Alipay : 1,000,000+\n",
      "EH National Mobile Banking : 50+\n",
      "EI Mobile : 100,000+\n",
      "EI SmartMiles : 1,000+\n",
      "Tigo Money El Salvador : 100,000+\n",
      "The dollar in mexico : 100,000+\n",
      "Western Union US - Send Money Transfers Quickly : 5,000,000+\n",
      "EO.TRADE - Coin sale : 10,000+\n",
      "Cryptocurrency Trading - How To Trade Crypto : 100+\n",
      "EP FCU : 100+\n",
      "Lead'er : 5,000+\n",
      "ET Markets : NSE & BSE India : 1,000,000+\n",
      "Moneycontrol â€“ Stocks, Sensex, Mutual Funds, IPO : 5,000,000+\n",
      "CNBC: Breaking Business News & Live Market Data : 1,000,000+\n",
      "EU Mobile Money : 100,000+\n",
      "EU Mobile Money Partenaire Commercial : 10,000+\n",
      "Intra- and extra-EU trade data : 100+\n",
      "E W Bookkeeping & Accountancy : 100+\n",
      "Money Manager Ex for Android : 100,000+\n",
      "EY TaxChat : 1,000+\n",
      "EY Expenses : 1,000+\n",
      "EY Forensics : 1,000+\n",
      "EZ Receipts : 100,000+\n",
      "F&M Bank - EZ Banking : 10,000+\n",
      "EZ Financial Calculator : 1,000+\n",
      "LEADS FA : 1,000+\n",
      "Bank FD Interest Calculator : 10,000+\n",
      "FD Community FCU Mobile : 1,000+\n",
      "Policy And FD Manager : 500+\n",
      "FD Calculator | Term Deposit | Fixed Deposit : 1,000+\n",
      "Financial Calculator India : 1,000,000+\n",
      "FD Calculator (EMI, SIP, RD & Loan Eligilibility) : 1,000+\n",
      "EMI, FD, RD - Bank Calculator : 5,000+\n",
      "RD/FD Calculator : 10,000+\n",
      "Fix Deposit Calculator (FD) : 1,000+\n",
      "FD Interest Calculator : 5,000+\n",
      "Deposit Calculator FD & RD : 10,000+\n",
      "Banking Calculator : 100,000+\n",
      "EMI/FD/RD/PV/IRR/BEP/EOQ Calc : 10,000+\n",
      "EMI Calculator | FD Calculator | RD calculator : 10,000+\n",
      "Santa Fe FCU Mobile Banking : 1,000+\n",
      "FE CREDIT - TET VUI : 50,000+\n",
      "Caprock Santa Fe Credit Union : 100+\n",
      "FE CPS : 10,000+\n",
      "FG Wallet : 1,000+\n",
      "FH Wallet : 1+\n",
      "First Hawaiian Bank Mobile : 10,000+\n",
      "FI CFL : 10,000+\n",
      "PriorityONE Credit Union of Fl : 1,000+\n",
      "First Federal Bank of Florida : 10,000+\n",
      "SB Â· FN 1870 Mobile Banking : 10,000+\n",
      "FO BOULANGER : 50+\n",
      "BankNordik : 5,000+\n",
      "FP Markets : 100+\n",
      "FP Boss : 1+\n",
      "FP FCU : 5,000+\n",
      "Gold Quote - Gold.fr : 10,000+\n"
     ]
    }
   ],
   "source": [
    "for app in android_final:\n",
    "    if app[1] == 'FINANCE':\n",
    "        print(app[0], ':', app[5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Since part of our goal was to identify an app genre that shows potential for being profitable, we have to consider both the App Store and Google Play markets. We noticed that the \"Utilities\" genre in the App Store is in a good space for an app to breakthrough and the \"FINANCE\" genre on Google Play provides a healthy market to compete in while also primarily containing banking and investing apps. Thus, it would be a good idea to combine these two types of genres and make a finance based utility app.\n",
    "\n",
    "One idea would be to make a sophisticated budgeting app that focuses on users who are active investors in the stock market. Some features might include being able to perform hypothetical investments in particular companies in the past, present and future, or even provide advice on how to handle money by suggesting ideas and articles to read. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Conclusions** \n",
    "\n",
    "In this project, we analyzed data about mobile apps on both the App Store and Google Play with the goal of recommending an app profile that can be profitable for both markets. \n",
    "\n",
    "We concluded that making a finance based utility app could be profitable in both markets.There are many popular finance apps, so we need some features that will set us apart and make us relevant. Some features might include allowing the user to budget in an organized manner, perform hypothetical scenarios with their budget taken into account, providing advice on how to handle money based on articles and videos, etc. \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
